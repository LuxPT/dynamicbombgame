#define Password_Length 8
#include <Keypad.h>
#include <LiquidCrystal.h>

int led[] = {8, 7, 6}; // Só tinha estes pins disponíveis no simulador mas é fácil de adicionar mais.

int random_val = 0;
char Master[3][Password_Length] = { "123A456", "2020ACB", "BC2020A"}; // 3 possibilidades parecem suficientes.
char Data[Password_Length];

byte data_count = 0, master_count = 0;
bool password_correta; // Não se encontra em uso.
char customKey;

const byte ROWS = 4;
const byte COLS = 4;


char hexaKeys[ROWS][COLS] = { // Inicialização da matriz 4x4
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

//byte rowPins[ROWS] = {9, 8, 7, 6}; // Pins do keypad
//byte colPins[COLS] = {5, 4, 3, 2}; // Pins do keypad

byte rowPins[ROWS] = {A5, A4, A3, A2}; // Pinos que utilizei para o simulador
byte colPins[COLS] = {A1, 13, 10, 9}; // Pinos que utilizei para o simulador

const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2; // Pinos do LCD
LiquidCrystal lcd(rs, en, d4, d5, d6, d7); // Inicio do LCD
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); // Inicio do Keypad


void setup() {
  lcd.begin(16, 2); // Inicialização do LCD

  for(int i = 0; i <= 2; i++){
  pinMode(led[i], OUTPUT);
  digitalWrite(led[i], LOW);
  }
  randomSeed(analogRead(A0));
  random_val = random(0,2); // Faz com que random_val assuma um valor aleatório entre 0 e 2;

switch(random_val){
  
  case 0: // Primeira led acessa -> Password 0
  digitalWrite(led[0], HIGH);
  break;

  case 1: // Primeira e última led acessa -> Password 1
  digitalWrite(led[0], HIGH);
  digitalWrite(led[2], HIGH);
  break;

  case 2: // Segunda led acessa -> Password 2
  digitalWrite(led[1], HIGH);
  break;
  } // Fim do switch

}

void loop() {
  passdetect();

}

void passdetect() {
  lcd.setCursor(0, 1);
  lcd.print("PW:");

  customKey = customKeypad.getKey();
  if (customKey) {
    Data[data_count] = customKey;
    lcd.setCursor(data_count + 3, 1); // Aqui tem que ser +3 dado que "PW:" ocupa 3 digitos
    lcd.print(Data[data_count]);
    data_count++;
  }

  if (data_count == Password_Length - 1) {
    lcd.clear();

    if (!strcmp(Data, Master[random_val])) {
      lcd.print("Correct");
      //digitalWrite(signalPin, HIGH); // Não é necessário
      delay(5000); // Não é necessário
      //digitalWrite(signalPin, LOW); // Não é necessário
    }
    else {
      lcd.print("Incorrect");
      delay(1000);
    }

    lcd.clear();
    clearData();
  }
}
void clearData() {
  while (data_count != 0) {
    Data[data_count--] = 0;
  }
  return;
}
