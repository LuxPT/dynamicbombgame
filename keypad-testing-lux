#include <Keypad.h>

#define Password_Length 8
#include <Keypad.h>
#include <LiquidCrystal.h>

//int signalPin = 12; Inútil neste código

char Data[Password_Length];
char Master[Password_Length] = "123A456"; // Palavra passe
byte data_count = 0, master_count = 0;
bool password_correta;
char customKey;

const byte ROWS = 4;
const byte COLS = 4;

char hexaKeys[ROWS][COLS] = { // Inicialização da matriz 4x4
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

//byte rowPins[ROWS] = {9, 8, 7, 6}; // Pins do keypad
//byte colPins[COLS] = {5, 4, 3, 2}; // Pins do keypad

byte rowPins[ROWS] = {A5, A4, A3, A2};
byte colPins[COLS] = {A1, A0, 10, 9};

const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7); // Inicio do LCD
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);


void setup() {
  //lcd.init(); À partida também não é necessário
  lcd.begin(16, 2);
  //lcd.backlight(); Não é necessário dado que temos o led inbutido
  //pinMode(signalPin, OUTPUT); Não estamos a usar o signalPin, o código era inicialmente para um relay
}

void loop() {
  passdetect();

}

void passdetect() {
  lcd.setCursor(0, 0);
  lcd.print("Enter Password:");

  customKey = customKeypad.getKey();
  if (customKey) {
    Data[data_count] = customKey;
    lcd.setCursor(data_count, 1);
    lcd.print(Data[data_count]);
    data_count++;
  }

  if (data_count == Password_Length - 1) {
    lcd.clear();

    if (!strcmp(Data, Master)) {
      lcd.print("Correct");
      //digitalWrite(signalPin, HIGH); // Não é necessário
      //delay(5000); // Não é necessário
      //digitalWrite(signalPin, LOW); // Não é necessário
    }
    else {
      lcd.print("Incorrect");
      delay(1000);
    }

    lcd.clear();
    clearData();
  }
}
void clearData() {
  while (data_count != 0) {
    Data[data_count--] = 0;
  }
  return;
}
