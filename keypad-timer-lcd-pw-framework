#define Password_Length 8 // Tamanho da password, deve ser preservado.
// Leds da sequencia
#define LED1 53 // Pin do led1
#define LED2 52 // Pin do led2
#define LED3 51 // Pin do led3

unsigned long tempoinicial, clockatual;
unsigned int minutos = 4, segundos = 59;
char timeline[16]; // No fundo é uma linha do LCD

#include <Keypad.h>
#include <LiquidCrystal.h>

int led[] = {LED1, LED2, LED3}; // Leds relativos à sequência

int random_val = 0;
char Master[4][Password_Length] = { "123A456", "2020ACB", "BC2876#", "#A95C06"}; // 4 possibilidades parecem suficientes.
char Data[Password_Length];

byte data_count = 0, master_count = 0;
bool password_correta; // Não se encontra em uso.
char customKey;

const byte ROWS = 4;
const byte COLS = 4;


char hexaKeys[ROWS][COLS] = { // Inicialização da matriz 4x4
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

//byte rowPins[ROWS] = {9, 8, 7, 6}; // Pins do keypad
//byte colPins[COLS] = {5, 4, 3, 2}; // Pins do keypad

// Keypad:
byte rowPins[ROWS] = {A5, A4, A3, A2}; // Pinos que utilizei para o simulador
byte colPins[COLS] = {A1, 13, 10, 9}; // Pinos que utilizei para o simulador

// LCD
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2; // Pinos do LCD
LiquidCrystal lcd(rs, en, d4, d5, d6, d7); // Inicio do LCD
Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); // Inicio do Keypad

void printlcd() {
  lcd.setCursor(7, 0);
  lcd.print(minutos);
  lcd.print(":");

  switch (segundos) {

    case 0 ... 9:
      lcd.print("0");
      lcd.print(segundos);
      break;

    default:
      lcd.print(segundos);
      break;
  }
}

void timer() {
  if (millis() - tempoinicial >= 1000) { // Clock de um segundo;
    if (minutos >= 0) {
      segundos--;
      Serial.println(segundos);
      tempoinicial = millis(); // Novo tempo inicial
    }
  }

  if (minutos > 0 && segundos == 0) {
    minutos--;
    segundos = 59;
    Serial.print("Minutos:");
    Serial.println(minutos);
  }

  else if (minutos <= 0 && segundos == 0) {
    minutos = 0;
    segundos = 0;
    Serial.print("Minutos: ");
    Serial.print(minutos);
    Serial.print(" Segundos: ");
    Serial.println(segundos);
  }
}

void setup() {
  tempoinicial = millis(); // Regista o tempo inicial
  clockatual = millis();
  
  
  lcd.begin(16, 2); // Inicialização do LCD
  lcd.print("Timer:"); // Imprime "Time" no display

  
  for (int i = 0; i <= 2; i++) {
    pinMode(led[i], OUTPUT);
    digitalWrite(led[i], LOW);
  }
  randomSeed(analogRead(A0));
  random_val = random(0, 4); // Faz com que random_val assuma um valor aleatório entre 0 e 3;

  switch (random_val) {

    case 0: // Primeira led acessa -> Password 0 "123A456"
      digitalWrite(led[0], HIGH);
      break;

    case 1: // Primeira e última led acessa -> Password 1 "2020ACB"
      digitalWrite(led[0], HIGH);
      digitalWrite(led[2], HIGH);
      break;

    case 2: // Segunda led acessa -> Password 2 "BC2020A"
      digitalWrite(led[1], HIGH);
      break;

    case 3: // Todas acessas -> Password 3 "BC2020A"
      digitalWrite(led[0], HIGH);
      digitalWrite(led[1], HIGH);
      digitalWrite(led[2], HIGH);
      break;
  } // Fim do switch

}

void loop() {
  passdetect();
  timer();
  printlcd();
}

void passdetect() {
  lcd.setCursor(0, 1);
  lcd.print("PW:");

  customKey = customKeypad.getKey();
  if (customKey) {
    Data[data_count] = customKey;
    lcd.setCursor(data_count + 3, 1); // Aqui tem que ser +3 dado que "PW:" ocupa 3 digitos
    lcd.print(Data[data_count]);
    data_count++;
  }

  if (data_count == Password_Length - 1) {
    lcd.clear();

    if (!strcmp(Data, Master[random_val])) {

      lcd.setCursor(0, 1);
      lcd.print("Correct");
      //digitalWrite(signalPin, HIGH); // Não é necessário
      delay(5000); // Não é necessário
      //digitalWrite(signalPin, LOW); // Não é necessário
    }
    else {
      lcd.setCursor(0, 1);
      lcd.print("Incorrect");
      delay(1000);
    }

    lcd.clear();
    clearData();
  }
}
void clearData() {
  while (data_count != 0) {
    Data[data_count--] = 0;
  }
  return;
}
